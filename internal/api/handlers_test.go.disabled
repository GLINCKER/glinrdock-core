package api

import (
	"encoding/json"
	"net/http"
	"net/http/httptest"
	"testing"

	"github.com/GLINCKER/glinrdock/internal/dockerx"
	"github.com/gin-gonic/gin"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestHealthHandler(t *testing.T) {
	gin.SetMode(gin.TestMode)

	mockClient := dockerx.NewMockClient()
	mockEngine := dockerx.NewMockEngine()
	handlers := NewHandlers(mockClient, nil, nil, nil, nil, mockEngine, nil)

	w := httptest.NewRecorder()
	c, _ := gin.CreateTestContext(w)

	handlers.Health(c)

	assert.Equal(t, http.StatusOK, w.Code)

	var response map[string]interface{}
	err := json.Unmarshal(w.Body.Bytes(), &response)
	require.NoError(t, err)

	assert.Equal(t, true, response["ok"])
	assert.Contains(t, response, "version")
	assert.Contains(t, response, "uptime")
}

func TestSystemHandler(t *testing.T) {
	gin.SetMode(gin.TestMode)

	mockClient := dockerx.NewMockClient()
	mockEngine := dockerx.NewMockEngine()
	handlers := NewHandlers(mockClient, nil, nil, nil, nil, mockEngine, nil)

	w := httptest.NewRecorder()
	c, _ := gin.CreateTestContext(w)

	handlers.System(c)

	assert.Equal(t, http.StatusOK, w.Code)

	var response map[string]interface{}
	err := json.Unmarshal(w.Body.Bytes(), &response)
	require.NoError(t, err)

	assert.Contains(t, response, "go_version")
	assert.Contains(t, response, "os")
	assert.Contains(t, response, "arch")
	assert.Equal(t, "connected", response["docker_status"])
	assert.Contains(t, response, "uptime")
}
