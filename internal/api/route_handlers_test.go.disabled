package api

import (
	"bytes"
	"context"
	"encoding/json"
	"net/http"
	"net/http/httptest"
	"testing"

	"github.com/GLINCKER/glinrdock/internal/dockerx"
	"github.com/GLINCKER/glinrdock/internal/store"
	"github.com/gin-gonic/gin"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
	"github.com/stretchr/testify/require"
)

// MockRouteStore implements RouteStore for testing
type MockRouteStore struct {
	mock.Mock
}

func (m *MockRouteStore) CreateRoute(ctx context.Context, serviceID int64, spec store.RouteSpec) (store.Route, error) {
	args := m.Called(ctx, serviceID, spec)
	return args.Get(0).(store.Route), args.Error(1)
}

func (m *MockRouteStore) ListRoutes(ctx context.Context, serviceID int64) ([]store.Route, error) {
	args := m.Called(ctx, serviceID)
	return args.Get(0).([]store.Route), args.Error(1)
}

func (m *MockRouteStore) GetRoute(ctx context.Context, id int64) (store.Route, error) {
	args := m.Called(ctx, id)
	return args.Get(0).(store.Route), args.Error(1)
}

func (m *MockRouteStore) GetAllRoutes(ctx context.Context) ([]store.Route, error) {
	args := m.Called(ctx)
	return args.Get(0).([]store.Route), args.Error(1)
}

func (m *MockRouteStore) DeleteRoute(ctx context.Context, id int64) error {
	args := m.Called(ctx, id)
	return args.Error(0)
}

func (m *MockRouteStore) GetService(ctx context.Context, id int64) (store.Service, error) {
	args := m.Called(ctx, id)
	return args.Get(0).(store.Service), args.Error(1)
}

// setupRouteTestServer creates a test server for route endpoints
func setupRouteTestServer(t *testing.T, routeStore RouteStore) *gin.Engine {
	gin.SetMode(gin.TestMode)

	dockerClient := dockerx.NewMockClient()
	mockEngine := dockerx.NewMockEngine()
	handlers := NewHandlers(dockerClient, nil, nil, nil, routeStore, mockEngine, nil)

	r := gin.New()

	// Add routes without authentication middleware for testing
	v1 := r.Group("/v1")
	{
		v1.POST("/services/:id/routes", handlers.CreateServiceRoute)
		v1.GET("/services/:id/routes", handlers.ListServiceRoutes)
		v1.GET("/routes/:id", handlers.GetRoute)
		v1.DELETE("/routes/:id", handlers.DeleteRoute)
		v1.GET("/routes", handlers.ListAllRoutes)
		v1.POST("/system/nginx/reload", handlers.RegenerateNginxConfig)
	}

	return r
}

func TestCreateServiceRoute(t *testing.T) {
	mockStore := &MockRouteStore{}

	routeSpec := store.RouteSpec{
		Domain: "api.example.com",
		Port:   8080,
		TLS:    true,
	}

	expectedRoute := store.Route{
		ID:        1,
		ServiceID: 1,
		Domain:    "api.example.com",
		Port:      8080,
		TLS:       true,
	}

	mockStore.On("CreateRoute", mock.Anything, int64(1), routeSpec).Return(expectedRoute, nil)

	r := setupRouteTestServer(t, mockStore)

	// Create request
	reqBody, _ := json.Marshal(routeSpec)
	w := httptest.NewRecorder()
	req, _ := http.NewRequest("POST", "/v1/services/1/routes", bytes.NewBuffer(reqBody))
	req.Header.Set("Content-Type", "application/json")

	r.ServeHTTP(w, req)

	assert.Equal(t, http.StatusCreated, w.Code)

	var response store.Route
	err := json.Unmarshal(w.Body.Bytes(), &response)
	require.NoError(t, err)
	assert.Equal(t, "api.example.com", response.Domain)
	assert.Equal(t, 8080, response.Port)
	assert.True(t, response.TLS)

	mockStore.AssertExpectations(t)
}

func TestCreateServiceRouteValidation(t *testing.T) {
	mockStore := &MockRouteStore{}
	r := setupRouteTestServer(t, mockStore)

	t.Run("InvalidServiceID", func(t *testing.T) {
		reqBody := `{"domain": "test.com", "port": 80}`
		w := httptest.NewRecorder()
		req, _ := http.NewRequest("POST", "/v1/services/invalid/routes", bytes.NewBufferString(reqBody))
		req.Header.Set("Content-Type", "application/json")

		r.ServeHTTP(w, req)

		assert.Equal(t, http.StatusBadRequest, w.Code)
		assert.Contains(t, w.Body.String(), "invalid service ID")
	})

	t.Run("MissingDomain", func(t *testing.T) {
		reqBody := `{"port": 80}`
		w := httptest.NewRecorder()
		req, _ := http.NewRequest("POST", "/v1/services/1/routes", bytes.NewBufferString(reqBody))
		req.Header.Set("Content-Type", "application/json")

		r.ServeHTTP(w, req)

		assert.Equal(t, http.StatusBadRequest, w.Code)
	})

	t.Run("InvalidPort", func(t *testing.T) {
		reqBody := `{"domain": "test.com", "port": -1}`
		w := httptest.NewRecorder()
		req, _ := http.NewRequest("POST", "/v1/services/1/routes", bytes.NewBufferString(reqBody))
		req.Header.Set("Content-Type", "application/json")

		r.ServeHTTP(w, req)

		assert.Equal(t, http.StatusBadRequest, w.Code)
	})
}

func TestListServiceRoutes(t *testing.T) {
	mockStore := &MockRouteStore{}

	expectedRoutes := []store.Route{
		{ID: 1, ServiceID: 1, Domain: "api.example.com", Port: 8080, TLS: true},
		{ID: 2, ServiceID: 1, Domain: "www.example.com", Port: 80, TLS: false},
	}

	mockStore.On("ListRoutes", mock.Anything, int64(1)).Return(expectedRoutes, nil)

	r := setupRouteTestServer(t, mockStore)

	w := httptest.NewRecorder()
	req, _ := http.NewRequest("GET", "/v1/services/1/routes", nil)

	r.ServeHTTP(w, req)

	assert.Equal(t, http.StatusOK, w.Code)

	var response map[string][]store.Route
	err := json.Unmarshal(w.Body.Bytes(), &response)
	require.NoError(t, err)
	assert.Len(t, response["routes"], 2)
	assert.Equal(t, "api.example.com", response["routes"][0].Domain)

	mockStore.AssertExpectations(t)
}

func TestGetRoute(t *testing.T) {
	mockStore := &MockRouteStore{}

	expectedRoute := store.Route{
		ID:        1,
		ServiceID: 1,
		Domain:    "api.example.com",
		Port:      8080,
		TLS:       true,
	}

	mockStore.On("GetRoute", mock.Anything, int64(1)).Return(expectedRoute, nil)

	r := setupRouteTestServer(t, mockStore)

	w := httptest.NewRecorder()
	req, _ := http.NewRequest("GET", "/v1/routes/1", nil)

	r.ServeHTTP(w, req)

	assert.Equal(t, http.StatusOK, w.Code)

	var response store.Route
	err := json.Unmarshal(w.Body.Bytes(), &response)
	require.NoError(t, err)
	assert.Equal(t, "api.example.com", response.Domain)

	mockStore.AssertExpectations(t)
}

func TestGetRouteNotFound(t *testing.T) {
	mockStore := &MockRouteStore{}

	mockStore.On("GetRoute", mock.Anything, int64(999)).Return(store.Route{}, assert.AnError)

	r := setupRouteTestServer(t, mockStore)

	w := httptest.NewRecorder()
	req, _ := http.NewRequest("GET", "/v1/routes/999", nil)

	r.ServeHTTP(w, req)

	assert.Equal(t, http.StatusInternalServerError, w.Code)
	assert.Contains(t, w.Body.String(), "failed to get route")

	mockStore.AssertExpectations(t)
}

func TestDeleteRoute(t *testing.T) {
	mockStore := &MockRouteStore{}

	route := store.Route{ID: 1, ServiceID: 1, Domain: "api.example.com", Port: 8080}
	mockStore.On("GetRoute", mock.Anything, int64(1)).Return(route, nil)
	mockStore.On("DeleteRoute", mock.Anything, int64(1)).Return(nil)

	r := setupRouteTestServer(t, mockStore)

	w := httptest.NewRecorder()
	req, _ := http.NewRequest("DELETE", "/v1/routes/1", nil)

	r.ServeHTTP(w, req)

	assert.Equal(t, http.StatusOK, w.Code)

	var response map[string]string
	err := json.Unmarshal(w.Body.Bytes(), &response)
	require.NoError(t, err)
	assert.Equal(t, "route deleted successfully", response["message"])

	mockStore.AssertExpectations(t)
}

func TestListAllRoutes(t *testing.T) {
	mockStore := &MockRouteStore{}

	expectedRoutes := []store.Route{
		{ID: 1, ServiceID: 1, Domain: "api.example.com", Port: 8080, TLS: true},
		{ID: 2, ServiceID: 2, Domain: "www.example.com", Port: 80, TLS: false},
	}

	mockStore.On("GetAllRoutes", mock.Anything).Return(expectedRoutes, nil)

	r := setupRouteTestServer(t, mockStore)

	w := httptest.NewRecorder()
	req, _ := http.NewRequest("GET", "/v1/routes", nil)

	r.ServeHTTP(w, req)

	assert.Equal(t, http.StatusOK, w.Code)

	var response map[string][]store.Route
	err := json.Unmarshal(w.Body.Bytes(), &response)
	require.NoError(t, err)
	assert.Len(t, response["routes"], 2)

	mockStore.AssertExpectations(t)
}

func TestRegenerateNginxConfig(t *testing.T) {
	mockStore := &MockRouteStore{}
	r := setupRouteTestServer(t, mockStore)

	t.Run("NginxConfigNotAvailable", func(t *testing.T) {
		w := httptest.NewRecorder()
		req, _ := http.NewRequest("POST", "/v1/system/nginx/reload", nil)

		r.ServeHTTP(w, req)

		assert.Equal(t, http.StatusServiceUnavailable, w.Code)
		assert.Contains(t, w.Body.String(), "nginx configuration not available")
	})

	// Test with nginx config would require more setup,
	// so we'll just test the error case for now
}
