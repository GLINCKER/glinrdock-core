package api

import (
	"bytes"
	"context"
	"encoding/json"
	"net/http"
	"net/http/httptest"
	"testing"

	"github.com/GLINCKER/glinrdock/internal/auth"
	"github.com/GLINCKER/glinrdock/internal/store"
	"github.com/gin-gonic/gin"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
	"github.com/stretchr/testify/require"
)

// MockTokenStore for testing API handlers
type MockTokenStore struct {
	mock.Mock
}

func (m *MockTokenStore) CreateToken(ctx context.Context, name, plain, role string) (store.Token, error) {
	args := m.Called(ctx, name, plain, role)
	return args.Get(0).(store.Token), args.Error(1)
}

func (m *MockTokenStore) ListTokens(ctx context.Context) ([]store.Token, error) {
	args := m.Called(ctx)
	return args.Get(0).([]store.Token), args.Error(1)
}

func (m *MockTokenStore) DeleteTokenByName(ctx context.Context, name string) error {
	args := m.Called(ctx, name)
	return args.Error(0)
}

func setupTokenTestRouter(tokenStore TokenStore) *gin.Engine {
	gin.SetMode(gin.TestMode)
	r := gin.New()

	handlers := &Handlers{
		tokenStore: tokenStore,
	}

	// Setup routes with authentication middleware
	v1 := r.Group("/v1")
	{
		protected := v1.Group("")
		protected.Use(func(c *gin.Context) {
			// Mock authentication - set role based on test scenarios
			authHeader := c.GetHeader("Authorization")
			if authHeader == "Bearer admin-token" {
				c.Set("token_role", store.RoleAdmin)
				c.Set("token_name", "admin-token")
			} else if authHeader == "Bearer deployer-token" {
				c.Set("token_role", store.RoleDeployer)
				c.Set("token_name", "deployer-token")
			} else if authHeader == "Bearer viewer-token" {
				c.Set("token_role", store.RoleViewer)
				c.Set("token_name", "viewer-token")
			} else {
				c.JSON(http.StatusUnauthorized, gin.H{"error": "unauthorized"})
				c.Abort()
				return
			}
			c.Next()
		})

		// Token management endpoints (admin only)
		tokens := protected.Group("/tokens")
		tokens.Use(func(c *gin.Context) {
			role := auth.CurrentRole(c)
			if role != store.RoleAdmin {
				c.JSON(http.StatusForbidden, gin.H{"error": "insufficient permissions"})
				c.Abort()
				return
			}
			c.Next()
		})
		{
			tokens.POST("", handlers.CreateToken)
			tokens.GET("", handlers.ListTokens)
			tokens.DELETE("/:name", handlers.DeleteToken)
		}
	}

	return r
}

func TestCreateToken_Success(t *testing.T) {
	mockStore := &MockTokenStore{}
	expectedToken := store.Token{
		ID:   1,
		Name: "new-token",
		Role: store.RoleDeployer,
	}

	mockStore.On("CreateToken", mock.Anything, "new-token", "secret123", store.RoleDeployer).Return(expectedToken, nil)

	router := setupTokenTestRouter(mockStore)

	reqBody := CreateTokenRequest{
		Name:  "new-token",
		Plain: "secret123",
		Role:  store.RoleDeployer,
	}
	bodyBytes, _ := json.Marshal(reqBody)

	req := httptest.NewRequest("POST", "/v1/tokens", bytes.NewBuffer(bodyBytes))
	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("Authorization", "Bearer admin-token")
	w := httptest.NewRecorder()

	router.ServeHTTP(w, req)

	assert.Equal(t, http.StatusCreated, w.Code)

	var response map[string]interface{}
	err := json.Unmarshal(w.Body.Bytes(), &response)
	require.NoError(t, err)

	assert.Equal(t, float64(1), response["id"])
	assert.Equal(t, "new-token", response["name"])
	assert.Equal(t, store.RoleDeployer, response["role"])
	assert.NotContains(t, response, "hash") // Hash should not be returned

	mockStore.AssertExpectations(t)
}

func TestCreateToken_DefaultRole(t *testing.T) {
	mockStore := &MockTokenStore{}
	expectedToken := store.Token{
		ID:   1,
		Name: "admin-token",
		Role: store.RoleAdmin,
	}

	mockStore.On("CreateToken", mock.Anything, "admin-token", "secret123", store.RoleAdmin).Return(expectedToken, nil)

	router := setupTokenTestRouter(mockStore)

	reqBody := CreateTokenRequest{
		Name:  "admin-token",
		Plain: "secret123",
		// Role omitted - should default to admin
	}
	bodyBytes, _ := json.Marshal(reqBody)

	req := httptest.NewRequest("POST", "/v1/tokens", bytes.NewBuffer(bodyBytes))
	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("Authorization", "Bearer admin-token")
	w := httptest.NewRecorder()

	router.ServeHTTP(w, req)

	assert.Equal(t, http.StatusCreated, w.Code)
	mockStore.AssertExpectations(t)
}

func TestCreateToken_InvalidRole(t *testing.T) {
	mockStore := &MockTokenStore{}
	router := setupTokenTestRouter(mockStore)

	reqBody := CreateTokenRequest{
		Name:  "test-token",
		Plain: "secret123",
		Role:  "invalid-role",
	}
	bodyBytes, _ := json.Marshal(reqBody)

	req := httptest.NewRequest("POST", "/v1/tokens", bytes.NewBuffer(bodyBytes))
	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("Authorization", "Bearer admin-token")
	w := httptest.NewRecorder()

	router.ServeHTTP(w, req)

	assert.Equal(t, http.StatusBadRequest, w.Code)
	assert.Contains(t, w.Body.String(), "invalid role")

	// Should not call store
	mockStore.AssertNotCalled(t, "CreateToken")
}

func TestCreateToken_PermissionDenied(t *testing.T) {
	tests := []struct {
		token      string
		expectCode int
		desc       string
	}{
		{"Bearer deployer-token", http.StatusForbidden, "deployer cannot create tokens"},
		{"Bearer viewer-token", http.StatusForbidden, "viewer cannot create tokens"},
		{"Bearer invalid-token", http.StatusUnauthorized, "invalid token"},
		{"", http.StatusUnauthorized, "no token"},
	}

	for _, test := range tests {
		t.Run(test.desc, func(t *testing.T) {
			mockStore := &MockTokenStore{}
			router := setupTokenTestRouter(mockStore)

			reqBody := CreateTokenRequest{
				Name:  "test-token",
				Plain: "secret123",
				Role:  store.RoleViewer,
			}
			bodyBytes, _ := json.Marshal(reqBody)

			req := httptest.NewRequest("POST", "/v1/tokens", bytes.NewBuffer(bodyBytes))
			req.Header.Set("Content-Type", "application/json")
			if test.token != "" {
				req.Header.Set("Authorization", test.token)
			}
			w := httptest.NewRecorder()

			router.ServeHTTP(w, req)

			assert.Equal(t, test.expectCode, w.Code)
			mockStore.AssertNotCalled(t, "CreateToken")
		})
	}
}

func TestListTokens_Success(t *testing.T) {
	mockStore := &MockTokenStore{}
	expectedTokens := []store.Token{
		{ID: 1, Name: "admin-token", Role: store.RoleAdmin},
		{ID: 2, Name: "deployer-token", Role: store.RoleDeployer},
		{ID: 3, Name: "viewer-token", Role: store.RoleViewer},
	}

	mockStore.On("ListTokens", mock.Anything).Return(expectedTokens, nil)

	router := setupTokenTestRouter(mockStore)

	req := httptest.NewRequest("GET", "/v1/tokens", nil)
	req.Header.Set("Authorization", "Bearer admin-token")
	w := httptest.NewRecorder()

	router.ServeHTTP(w, req)

	assert.Equal(t, http.StatusOK, w.Code)

	var response map[string]interface{}
	err := json.Unmarshal(w.Body.Bytes(), &response)
	require.NoError(t, err)

	tokens := response["tokens"].([]interface{})
	assert.Len(t, tokens, 3)

	// Check first token
	firstToken := tokens[0].(map[string]interface{})
	assert.Equal(t, "admin-token", firstToken["name"])
	assert.Equal(t, store.RoleAdmin, firstToken["role"])

	mockStore.AssertExpectations(t)
}

func TestListTokens_PermissionDenied(t *testing.T) {
	tests := []struct {
		token      string
		expectCode int
		desc       string
	}{
		{"Bearer deployer-token", http.StatusForbidden, "deployer cannot list tokens"},
		{"Bearer viewer-token", http.StatusForbidden, "viewer cannot list tokens"},
	}

	for _, test := range tests {
		t.Run(test.desc, func(t *testing.T) {
			mockStore := &MockTokenStore{}
			router := setupTokenTestRouter(mockStore)

			req := httptest.NewRequest("GET", "/v1/tokens", nil)
			req.Header.Set("Authorization", test.token)
			w := httptest.NewRecorder()

			router.ServeHTTP(w, req)

			assert.Equal(t, test.expectCode, w.Code)
			mockStore.AssertNotCalled(t, "ListTokens")
		})
	}
}

func TestDeleteToken_Success(t *testing.T) {
	mockStore := &MockTokenStore{}
	mockStore.On("DeleteTokenByName", mock.Anything, "test-token").Return(nil)

	router := setupTokenTestRouter(mockStore)

	req := httptest.NewRequest("DELETE", "/v1/tokens/test-token", nil)
	req.Header.Set("Authorization", "Bearer admin-token")
	w := httptest.NewRecorder()

	router.ServeHTTP(w, req)

	assert.Equal(t, http.StatusOK, w.Code)
	assert.Contains(t, w.Body.String(), "token deleted successfully")

	mockStore.AssertExpectations(t)
}

func TestDeleteToken_NotFound(t *testing.T) {
	mockStore := &MockTokenStore{}
	mockStore.On("DeleteTokenByName", mock.Anything, "nonexistent").Return(assert.AnError)

	router := setupTokenTestRouter(mockStore)

	req := httptest.NewRequest("DELETE", "/v1/tokens/nonexistent", nil)
	req.Header.Set("Authorization", "Bearer admin-token")
	w := httptest.NewRecorder()

	router.ServeHTTP(w, req)

	assert.Equal(t, http.StatusInternalServerError, w.Code) // Should handle error better

	mockStore.AssertExpectations(t)
}

func TestDeleteToken_PermissionDenied(t *testing.T) {
	tests := []struct {
		token      string
		expectCode int
		desc       string
	}{
		{"Bearer deployer-token", http.StatusForbidden, "deployer cannot delete tokens"},
		{"Bearer viewer-token", http.StatusForbidden, "viewer cannot delete tokens"},
	}

	for _, test := range tests {
		t.Run(test.desc, func(t *testing.T) {
			mockStore := &MockTokenStore{}
			router := setupTokenTestRouter(mockStore)

			req := httptest.NewRequest("DELETE", "/v1/tokens/test-token", nil)
			req.Header.Set("Authorization", test.token)
			w := httptest.NewRecorder()

			router.ServeHTTP(w, req)

			assert.Equal(t, test.expectCode, w.Code)
			mockStore.AssertNotCalled(t, "DeleteTokenByName")
		})
	}
}

func TestCreateToken_ValidationErrors(t *testing.T) {
	mockStore := &MockTokenStore{}
	router := setupTokenTestRouter(mockStore)

	tests := []struct {
		reqBody    interface{}
		expectCode int
		expectMsg  string
		desc       string
	}{
		{
			reqBody:    map[string]interface{}{"name": "", "plain": "secret"},
			expectCode: http.StatusBadRequest,
			expectMsg:  "required",
			desc:       "empty name",
		},
		{
			reqBody:    map[string]interface{}{"name": "test", "plain": ""},
			expectCode: http.StatusBadRequest,
			expectMsg:  "required",
			desc:       "empty plain token",
		},
		{
			reqBody:    "invalid json",
			expectCode: http.StatusBadRequest,
			expectMsg:  "",
			desc:       "invalid JSON",
		},
	}

	for _, test := range tests {
		t.Run(test.desc, func(t *testing.T) {
			var bodyBytes []byte
			if str, ok := test.reqBody.(string); ok {
				bodyBytes = []byte(str)
			} else {
				bodyBytes, _ = json.Marshal(test.reqBody)
			}

			req := httptest.NewRequest("POST", "/v1/tokens", bytes.NewBuffer(bodyBytes))
			req.Header.Set("Content-Type", "application/json")
			req.Header.Set("Authorization", "Bearer admin-token")
			w := httptest.NewRecorder()

			router.ServeHTTP(w, req)

			assert.Equal(t, test.expectCode, w.Code)
			if test.expectMsg != "" {
				assert.Contains(t, w.Body.String(), test.expectMsg)
			}

			mockStore.AssertNotCalled(t, "CreateToken")
		})
	}
}
