package api

import (
	"net/http"
	"net/http/httptest"
	"testing"

	"github.com/GLINCKER/glinrdock/internal/dockerx"
	"github.com/GLINCKER/glinrdock/internal/store"
	"github.com/gin-gonic/gin"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
)

// setupLifecycleTestServer creates a test server without authentication for lifecycle tests
func setupLifecycleTestServer(t *testing.T, serviceStore ServiceStore, dockerEngine DockerEngine) *gin.Engine {
	gin.SetMode(gin.TestMode)

	dockerClient := dockerx.NewMockClient()
	handlers := NewHandlers(dockerClient, nil, nil, serviceStore, nil, dockerEngine, nil)

	r := gin.New()

	// Add routes without authentication middleware
	v1 := r.Group("/v1")
	{
		services := v1.Group("/services")
		{
			services.POST("/:id/start", handlers.StartServiceHandler)
			services.POST("/:id/stop", handlers.StopServiceHandler)
			services.POST("/:id/restart", handlers.RestartServiceHandler)
		}
	}

	return r
}

func TestStartService(t *testing.T) {
	mockStore := &MockServiceStore{}
	mockEngine := &MockDockerEngine{}

	service := store.Service{ID: 1, ProjectID: 1, Name: "api"}
	mockStore.On("GetService", mock.Anything, int64(1)).Return(service, nil)
	mockEngine.On("Start", mock.Anything, "glinr_1_api").Return(nil)

	r := setupLifecycleTestServer(t, mockStore, mockEngine)

	w := httptest.NewRecorder()
	req, _ := http.NewRequest("POST", "/v1/services/1/start", nil)

	r.ServeHTTP(w, req)

	assert.Equal(t, http.StatusOK, w.Code)
	assert.Contains(t, w.Body.String(), "service started successfully")

	mockStore.AssertExpectations(t)
	mockEngine.AssertExpectations(t)
}

func TestStopService(t *testing.T) {
	mockStore := &MockServiceStore{}
	mockEngine := &MockDockerEngine{}

	service := store.Service{ID: 1, ProjectID: 1, Name: "api"}
	mockStore.On("GetService", mock.Anything, int64(1)).Return(service, nil)
	mockEngine.On("Stop", mock.Anything, "glinr_1_api").Return(nil)

	r := setupLifecycleTestServer(t, mockStore, mockEngine)

	w := httptest.NewRecorder()
	req, _ := http.NewRequest("POST", "/v1/services/1/stop", nil)

	r.ServeHTTP(w, req)

	assert.Equal(t, http.StatusOK, w.Code)
	assert.Contains(t, w.Body.String(), "service stopped successfully")

	mockStore.AssertExpectations(t)
	mockEngine.AssertExpectations(t)
}

func TestRestartService(t *testing.T) {
	mockStore := &MockServiceStore{}
	mockEngine := &MockDockerEngine{}

	service := store.Service{ID: 1, ProjectID: 1, Name: "api"}
	mockStore.On("GetService", mock.Anything, int64(1)).Return(service, nil)
	mockEngine.On("Restart", mock.Anything, "glinr_1_api").Return(nil)

	r := setupLifecycleTestServer(t, mockStore, mockEngine)

	w := httptest.NewRecorder()
	req, _ := http.NewRequest("POST", "/v1/services/1/restart", nil)

	r.ServeHTTP(w, req)

	assert.Equal(t, http.StatusOK, w.Code)
	assert.Contains(t, w.Body.String(), "service restarted successfully")

	mockStore.AssertExpectations(t)
	mockEngine.AssertExpectations(t)
}

func TestServiceLifecycleErrors(t *testing.T) {
	t.Run("InvalidServiceID", func(t *testing.T) {
		mockStore := &MockServiceStore{}
		mockEngine := dockerx.NewMockEngine()
		r := setupLifecycleTestServer(t, mockStore, mockEngine)

		w := httptest.NewRecorder()
		req, _ := http.NewRequest("POST", "/v1/services/invalid/start", nil)

		r.ServeHTTP(w, req)

		assert.Equal(t, http.StatusBadRequest, w.Code)
		assert.Contains(t, w.Body.String(), "invalid service ID")
	})

	t.Run("ServiceNotFound", func(t *testing.T) {
		mockStore := &MockServiceStore{}
		mockEngine := dockerx.NewMockEngine()
		mockStore.On("GetService", mock.Anything, int64(999)).Return(store.Service{}, store.ErrNotFound)

		r := setupLifecycleTestServer(t, mockStore, mockEngine)

		w := httptest.NewRecorder()
		req, _ := http.NewRequest("POST", "/v1/services/999/start", nil)

		r.ServeHTTP(w, req)

		assert.Equal(t, http.StatusNotFound, w.Code)
		assert.Contains(t, w.Body.String(), "service not found")

		mockStore.AssertExpectations(t)
	})

	t.Run("DockerEngineError", func(t *testing.T) {
		mockStore := &MockServiceStore{}
		mockEngine := &MockDockerEngine{}

		service := store.Service{ID: 1, ProjectID: 1, Name: "api"}
		mockStore.On("GetService", mock.Anything, int64(1)).Return(service, nil)
		mockEngine.On("Start", mock.Anything, "glinr_1_api").Return(assert.AnError)

		r := setupLifecycleTestServer(t, mockStore, mockEngine)

		w := httptest.NewRecorder()
		req, _ := http.NewRequest("POST", "/v1/services/1/start", nil)

		r.ServeHTTP(w, req)

		assert.Equal(t, http.StatusInternalServerError, w.Code)
		assert.Contains(t, w.Body.String(), "failed to start service")

		mockStore.AssertExpectations(t)
		mockEngine.AssertExpectations(t)
	})
}
