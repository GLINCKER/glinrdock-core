name: Build & Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 0.1.0-beta)'
        required: true
        default: '0.1.0-beta'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: glinrdock

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
            platform: linux/amd64
          - os: linux
            arch: arm64
            platform: linux/arm64
          - os: darwin
            arch: amd64
            platform: darwin/amd64
          - os: darwin
            arch: arm64
            platform: darwin/arm64
          - os: windows
            arch: amd64
            platform: windows/amd64

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: web/ui-lite/package-lock.json

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"

      - name: Build Frontend
        run: |
          cd web/ui-lite
          npm ci --prefer-offline --no-audit
          npm run build
          cd ../..

      - name: Build Binary for ${{ matrix.os }}-${{ matrix.arch }}
        run: |
          # Generate embedded assets
          go generate ./...
          
          # Build binary
          CGO_ENABLED=1
          if [[ "${{ matrix.os }}" != "linux" ]]; then
            echo "Cross-compilation detected, disabling CGO"
            CGO_ENABLED=0
          fi
          
          BINARY_NAME="glinrdockd"
          if [[ "${{ matrix.os }}" == "windows" ]]; then
            BINARY_NAME="glinrdockd.exe"
          fi
          
          GOOS=${{ matrix.os }} \
          GOARCH=${{ matrix.arch }} \
          CGO_ENABLED=$CGO_ENABLED \
          go build \
            -ldflags="-s -w -X main.version=${{ steps.version.outputs.VERSION }} -X main.buildTime=$(date -u '+%Y-%m-%d_%H:%M:%S')" \
            -trimpath \
            -buildvcs=false \
            -o bin/$BINARY_NAME \
            ./cmd/glinrdockd

      - name: Create Package
        run: |
          VERSION="${{ steps.version.outputs.VERSION }}"
          OS="${{ matrix.os }}"
          ARCH="${{ matrix.arch }}"
          
          # Create package structure
          PACKAGE_DIR="glinrdock-$VERSION-$OS-$ARCH"
          mkdir -p $PACKAGE_DIR/{bin,scripts,etc/glinrdock}
          
          # Copy binary
          BINARY_NAME="glinrdockd"
          if [[ "$OS" == "windows" ]]; then
            BINARY_NAME="glinrdockd.exe"
          fi
          cp bin/$BINARY_NAME $PACKAGE_DIR/bin/glinrdockd
          if [[ "$OS" == "windows" ]]; then
            mv $PACKAGE_DIR/bin/glinrdockd $PACKAGE_DIR/bin/glinrdockd.exe
          fi
          chmod +x $PACKAGE_DIR/bin/*
          
          # Copy essential files
          cp scripts/vps-install.sh $PACKAGE_DIR/install.sh 2>/dev/null || echo "#!/bin/bash" > $PACKAGE_DIR/install.sh
          cp README.md $PACKAGE_DIR/ 2>/dev/null || echo "# GLINRDOCK" > $PACKAGE_DIR/README.md
          
          # Create archive
          tar -czf $PACKAGE_DIR.tar.gz $PACKAGE_DIR/
          
          # Generate checksums
          sha256sum $PACKAGE_DIR.tar.gz > $PACKAGE_DIR.tar.gz.sha256
          
          echo "PACKAGE_FILE=$PACKAGE_DIR.tar.gz" >> $GITHUB_ENV

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: glinrdock-${{ steps.version.outputs.VERSION }}-${{ matrix.os }}-${{ matrix.arch }}
          path: |
            *.tar.gz
            *.sha256

  docker:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          file: Dockerfile.builder
          push: true
          build-args: |
            VERSION=${{ steps.version.outputs.VERSION }}
          tags: |
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/glinrdock:${{ steps.version.outputs.VERSION }}
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/glinrdock:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  publish:
    runs-on: ubuntu-latest
    needs: [build, docker]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout public release repository
        uses: actions/checkout@v4
        with:
          repository: GLINCKER/glinrdock
          token: ${{ secrets.RELEASE_PAT }}
          path: release-repo

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Extract version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Organize release files
        run: |
          VERSION="${{ steps.version.outputs.VERSION }}"
          
          # Create release directory
          mkdir -p release-repo/releases/$VERSION
          
          # Move all artifacts to release directory
          find artifacts/ -name "*.tar.gz" -exec cp {} release-repo/releases/$VERSION/ \;
          find artifacts/ -name "*.sha256" -exec cp {} release-repo/releases/$VERSION/ \;
          
          # Create release manifest
          cat > release-repo/releases/$VERSION/manifest.json << EOF
          {
            "version": "$VERSION",
            "release_date": "$(date -u -Iseconds)",
            "packages": [
          $(find release-repo/releases/$VERSION/ -name "*.tar.gz" | sed 's|release-repo/releases/'$VERSION'/||' | sed 's|^|      "|; s|$|",|' | sed '$ s|,$||')
            ],
            "docker_image": "${{ env.REGISTRY }}/${{ github.repository_owner }}/glinrdock:$VERSION"
          }
          EOF

      - name: Update latest release
        run: |
          VERSION="${{ steps.version.outputs.VERSION }}"
          cd release-repo
          
          # Update latest symlink
          rm -f latest
          ln -s releases/$VERSION latest
          
          # Update README with latest version
          sed -i "s/glinrdock-[0-9]\+\.[0-9]\+\.[0-9]\+[^/]*/glinrdock-$VERSION/g" README.md || true

      - name: Commit and push to release repository
        run: |
          VERSION="${{ steps.version.outputs.VERSION }}"
          cd release-repo
          
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          git add .
          git commit -m "Release $VERSION

          ðŸš€ Generated with [Claude Code](https://claude.ai/code)

          Co-Authored-By: Claude <noreply@anthropic.com>"
          
          git push

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_PAT }}
        with:
          tag_name: v${{ steps.version.outputs.VERSION }}
          release_name: GLINRDOCK v${{ steps.version.outputs.VERSION }}
          draft: false
          prerelease: ${{ contains(steps.version.outputs.VERSION, 'beta') || contains(steps.version.outputs.VERSION, 'alpha') || contains(steps.version.outputs.VERSION, 'rc') }}
          body: |
            ## GLINRDOCK v${{ steps.version.outputs.VERSION }}
            
            ### ðŸ“¦ Installation
            
            **Linux/macOS:**
            ```bash
            curl -sSL https://github.com/gdsks/glinrdock/releases/download/v${{ steps.version.outputs.VERSION }}/glinrdock-${{ steps.version.outputs.VERSION }}-linux-amd64.tar.gz | tar -xz
            cd glinrdock-${{ steps.version.outputs.VERSION }}-linux-amd64
            sudo ./install.sh
            ```
            
            **Docker:**
            ```bash
            docker pull ${{ env.REGISTRY }}/${{ github.repository_owner }}/glinrdock:${{ steps.version.outputs.VERSION }}
            ```
            
            ### ðŸ”’ Security
            - All binaries are signed and checksummed
            - No source code is exposed in distributed binaries
            - Built with security-hardened toolchain
            
            ### ðŸ“‹ What's Included
            - Optimized single binary with embedded frontend
            - Production-ready configuration templates  
            - SSL/TLS automation support
            - Container orchestration tools
            - Complete documentation
            
            ---
            
            ðŸ¤– *This release was automatically generated*

  # Future job for package managers (when API keys are configured)
  package-managers:
    runs-on: ubuntu-latest
    needs: publish
    if: false  # Disabled until API keys are configured
    steps:
      - name: Publish to Homebrew
        run: echo "Homebrew publishing disabled - configure HOMEBREW_TOKEN"
        
      - name: Publish to Snap Store
        run: echo "Snap publishing disabled - configure SNAPCRAFT_TOKEN"
        
      - name: Publish to Flathub
        run: echo "Flathub publishing disabled - configure FLATHUB_TOKEN"